https://www.cnblogs.com/ysocean/p/7928988.html

数组作为数据存储结构有一定的缺陷。
在无序数组中，搜索性能差，在有序数组中，插入效率又很低，而且这两种数组的删除效率都很低，
并且数组在创建后，其大小是固定了，设置的过大会造成内存的浪费，过小又不能满足数据量的存储。

数据结构——链表。
我们知道数组是一种通用的数据结构，能用来实现栈、队列等很多数据结构。
而链表也是一种使用广泛的通用数据结构，它也可以用来作为实现栈、队列等数据结构的基础，
基本上除非需要频繁的通过下标来随机访问各个数据，否则很多使用数组的地方都可以用链表来代替。

但是我们需要说明的是，链表是不能解决数据存储的所有问题的，它也有它的优点和缺点。
几种常见的链表，分别是单向链表、双端链表、有序链表、双向链表以及有迭代器的链表。

链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（"links"）
链表（Linked list）是一种常见的基础数据结构，是一种线性表，
但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。

使用链表结构可以克服数组链表需要预先知道数据大小的缺点，
链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。
但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。

单链表是链表中结构最简单的。
一个单链表的节点(Node)分为两个部分，
第一个部分(data)保存或者显示关于节点的信息（数据），另一个部分存储下一个节点的地址（指针）。最后一个节点存储地址的部分指向空值。

单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。
而插入一个节点，对于单向链表，我们只提供在链表头插入，只需要将当前插入的节点设置为头节点，next指向原头节点即可。
删除一个节点，我们将该节点的上一个节点的next指向该节点的下一个节点。

